---
import { loadQuery } from "../../nichiha/lib/load-query";
import Layout from '../layouts/Layout.astro';
import HeroComponent from "../components/Hero.astro";
import CtaComponent from "../components/Cta.astro";
import HeadlineComponent from "../components/Headline.astro";
import ImageComponent from "../components/Image.astro";
import LinkComponent from "../components/Link.astro";
import TextComponent  from '../components/Text.astro';
import HtmlComponent from "../components/HtmlComponent.astro";
import PortableText from "../components/PortableText.astro";  
import SeoComponent from "../components/SeoComponent.astro";

export const prerender = true;

export async function getStaticPaths() {
  const { data: pages } = await loadQuery({
    query: `*[_type == "page"]`
  });

  return pages.map(({ slug }) => ({
    params: { slug: slug.current },
  }));
}

const { slug } = Astro.params;
const { data: page } = await loadQuery({
  query: `*[_type == "page" && slug.current == $slug][0]{
    title,
    seo {
      seoTitle,
      seoDescription,
      seoKeywords,
      image
    },
    components[]->{
      _type,
      ...
    },
    blockContent
  }`,
  params: { slug },
});

const componentMap = {
  heroComponent: HeroComponent,
  ctaComponent: CtaComponent,
  headlineComponent: HeadlineComponent,
  imageComponent: ImageComponent,
  linkComponent: LinkComponent,
  textComponent: TextComponent,
  htmlComponent: HtmlComponent,
};

// Separate hero components from other components
const heroComponents = page.components?.filter(comp => comp._type === 'heroComponent') || [];
const linkComponents = page.components?.filter(comp => comp._type === 'linkComponent') || [];
const otherComponents = page.components?.filter(
  comp => comp._type !== 'heroComponent' && comp._type !== 'linkComponent'
) || [];

---

<Layout>
  <SeoComponent 
    title={page.seo?.seoTitle || page.title}
    description={page.seo?.seoDescription || 'Default description.'}
    keywords={page.seo?.seoKeywords?.join(', ') || ''}
    image={page.seo?.image || '/default-image.jpg'}
  />
  
  <!-- Hero Section - Always at top -->
  <section class="page-hero">
    {heroComponents.length > 0 ? (
      heroComponents.map((heroComponent) => {
        const Component = componentMap[heroComponent._type];
        return Component ? <Component {...heroComponent} /> : null;
      })
    ) : (

      <div class="fallback-hero">
        <div class="hero-content">
          <h1 class="hero-title">{page.title}</h1>
        </div>
        <div class="hero-overlay"></div>
      </div>
    )}
  </section>

  <!-- Main Content -->
  <main class="main-content">
    <div class="content-container">
      

      

      <!-- Portable Text Content -->
      {page.blockContent && (
        <section class="portable-text-section">
          <div class="prose-container">
            <PortableText portableText={page.blockContent} />
          </div>
        </section>
      )}


<!-- link component -->
{linkComponents.map((linkComponent) => {
  const Component = componentMap[linkComponent._type];

  // Remap fields for LinkComponent specifically
  const props = {
    ...linkComponent,
    href: linkComponent.url,
    label: linkComponent.title,
  };

  return Component ? <Component {...props} /> : null;
})}

      <!-- Other Components -->
      {otherComponents.map((component) => {
        const Component = componentMap[component._type];
        return Component ? <Component {...component} /> : null;
      })}
      
    </div>
  </main>
  <style >

  </style>
</Layout>
